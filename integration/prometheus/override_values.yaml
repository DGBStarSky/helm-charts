## Prometheus server ConfigMap entries
##
serverFiles:
  ## Records configuration
  ## Ref: https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/
  recording_rules.yml:
    groups:
      - name: costs.rules
        interval: 3600s
        rules:
          - expr: |
              sum(label_replace(irate(container_cpu_usage_seconds_total{container!="POD", container!="",image!=""}[1h]), "node", "$1", "instance",  "(.*)")) by (container, pod, node, namespace) * on (node) group_left() avg(avg_over_time(node_cpu_hourly_cost[1h])) by (node)
            record: namespace:container_cpu_usage_costs_hourly:sum_rate
          - expr: |
              sum(label_replace(avg_over_time(container_memory_working_set_bytes{container!="POD",container!="",image!=""}[1h]), "node", "$1", "instance",  "(.*)")) by (container, pod, node, namespace) / 1024.0 / 1024.0 / 1024.0 * on (node) group_left() avg(avg_over_time(node_ram_hourly_cost[1h])) by (node)
            record: namespace:container_memory_usage_costs_hourly:sum_rate
          - expr: |
              avg(avg_over_time(node_cpu_hourly_cost[1h])) by (node)
            record: node:node_cpu_hourly_cost:avg
          - expr: |
              avg(avg_over_time(node_ram_hourly_cost[1h])) by (node)
            record: node:node_ram_hourly_cost:avg
          - expr: |
              avg(avg_over_time(node_total_hourly_cost[1h])) by (node)
            record: node:node_total_hourly_cost:avg


# adds additional scrape configs to prometheus.yml
# must be a string so you have to add a | after extraScrapeConfigs:
# example adds prometheus-blackbox-exporter scrape config
extraScrapeConfigs: |-
  # this is used to scrape cost exporter
  - job_name: "fadvisor-cost-exporter"
    honor_timestamps: true
    scheme: http
    metrics_path: /metrics
    static_configs:
      - targets: ['cost-exporter.crane-system.svc.cluster.local:80']


server:
  service:
    annotations: { }
    labels: { }
    clusterIP: ""

    ## List of IP addresses at which the Prometheus server service is available
    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
    ##
    externalIPs: [ ]

    loadBalancerIP: ""
    loadBalancerSourceRanges: [ ]
    servicePort: 8081
    sessionAffinity: None
    type: ClusterIP

nodeExporter:
  hostRootfs: false